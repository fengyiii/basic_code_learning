#+title: chapter 4 复习题
#+author: fengyi

* 1.如何声明下述数据
a. actor是由30个char组成的数组。        char actor[30];
b. betsie是由100个short组成的数组。     short betsie[100];
c. chuck是由13个float组成的数组。       float chuck[13];
d. dipsea是由64个long double组成的数组。long double dipsea[64];

* 2.使用模板类array而不是数组来完成问题1
#+begin_src cpp
#include <iostream>
#include <array>
#include <typeinfo>

int main(void){
    std::array<char, 30> actor;
    std::array<short, 100> betsie;
    std::array<float, 13> chuck;
    std::array<long double, 64> dipsea;
    /* other ops */
    //std::cout << "actor: type = " << typeid(actor).name() << ", size = " << sizeof(actor) << ".\n";
    std::cout << "actor: size = " << sizeof(actor) << ".\n";
    std::cout << "betsie: size = " << sizeof(betsie) << ".\n";
    std::cout << "chuck: size = " << sizeof(chuck) << ".\n";
    std::cout << "dipsea: size = " << sizeof(dipsea) << ".\n";

    return 0;
}
#+end_src
#+results:
| actor:  | size | = |   30 |
| betsie: | size | = |  200 |
| chuck:  | size | = |   52 |
| dipsea: | size | = | 1024 |
 actor:   size  =   30
 betsie:  size  =  200
 chuck:   size  =    52
 dipsea:  size  =  1024

* 3.声明一个包含5个元素的int数组，并将它初始化为前5个正奇数
#+begin_src cpp
int nfoo[5] = {1, 3, 5, 7, 9};
#+end_src

* 4.编写一条语句，将问题3中数组第一个元素和最后一个元素的和赋给变量even
#+begin_src cpp
int nfoo[5] = {1, 3, 5, 7, 9};
int even = nfoo[0] + nfoo[4];
#+end_src

* 5.编写一条语句，显示float数组ideas中的第2个元素的值
#+begin_src cpp
float ideas[] = {1.1, 2.2, 3.3, 4.4};
std::cout << "ideas[1] = " << ideas[1] << std::endl;
#+end_src

* 6.声明一个char的数组，并将其初始化为字符串“cheeseburger”

#+begin_src cpp
char burger[] = "cheeseburger";
#+end_src

* 7.声明一个string对象，并将其初始化为字符串“Waldorf Salad”
#+begin_src cpp
std::string foo = "Waldorf Salad"
#+end_src

* 8.设计一个描述鱼的结构声明。结构中应当包括品种、重量（整数，单位为盎司）和长度（英寸，包括小数)
#+begin_src cpp
struct fish{
    char species[30];
    unsigned int ounces;
    unsigned float inches;
};
#+end_src

* 9.声明一个问题8中定义的结构的变量，并对它进行初始化
#+begin_src cpp
struct fish{
    char species[30];
    unsigned int ounces;
    unsigned float inches;
};

fish fishfoo = {"one", 10, 2.3};
#+end_src

* 10.用enum定义一个名为Response的类型，它包含Yes、No和Maybe等枚举量，其中Yes的值为1，No为0，Maybe为2
#+begin_src cpp
enume Responce {No, Yes, Maybe}
#+end_src

* 11.假设ted是一个double变量，请声明一个指向ted的指针，并使用该指针来显示ted的值

#+begin_src cpp
double* pted = &ted;
std::cout << *pted << std::endl;
#+end_src

* 12.假设treacle是一个包含10个元素的float数组，请声明一个指向treacle的第一个元素的指针，并使用该指针来显示数组的第一个元素和最后一个元素
#+begin_src cpp
float* pf = &treacle[0];
std::cout << *pf << *(pf+9)
#+end_src

* 13.编写一段代码，要求用户输入一个正整数，然后创建一个动态的int数组，其中包含的元素数目等于用户输入的值。首先使用new来完成这项任务，再使用vector对象来完成这项任务
#+begin_src cpp :results output 1:session
  #include <iostream>
  #include <vector>

  int main(void){
      int n;
      std::cout << "Enter a number : \n";
      //std::cin >> n;
      n = 5;
      int* pn = new int[n];
      std::vector<int> vi(n);
  }
#+end_src

#+RESULTS:

* 15.编写一段代码，给问题8中描述的结构动态分配内存，再读取该结构的成员的值
#+begin_src cpp :results output
  
#+end_src
